import java.util.concurrent.Semaphore;

public class SharedSemaphore {
	private int _data;
	
	private boolean _writing = false;
	private boolean _reading = true;
	
	// Thread Safe Mechanisms
	Semaphore writing = new Semaphore (1);
	Semaphore reading;
	
	// Local Setters
	private void setWriting (boolean value) { _writing = value; }
	private void setReading (boolean value) { _reading = value; }
	
	// Local Getters
	private boolean isWriting () { return _writing; }
	private boolean isReading () { return _reading; }
	
	
	// Constructor
	public SharedSemaphore (final int readerPermits)
	{
		reading = new Semaphore(readerPermits);
	}
	
	
	public int read(String id) throws InterruptedException {
		
		int rv;
		try {
			reading.acquire();
			
			// Reading
			this.setReading(true);
			rv = _data;
			System.out.format("READER %s <<   %d\n", id, _data);
			
		} finally {
			reading.release();
		}
		
		return rv;
	}
	
	public void write(String id, int data) throws InterruptedException {
		try {
			writing.acquire();
			
			// Writing
			_data = data;
			System.out.format("WRITER %s   >> %d\n", id, _data);
			
			
		} finally {
			writing.release();
		}
	}
}
